generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id              String            @id @default(cuid())
  username        String            @unique
  password        String
  name            String
  number          Int?
  secretKey       String
  createdAt       DateTime          @default(now())
  adminAuth       AdminAuth?
}

model User {
  id               String            @id @default(cuid())
  name             String
  username         String            @unique
  password         String
  avatar           String?
  avatarId         String?
  bio              String?           @db.Text
  role             Role
  education        Education?
  professionalData ProfessionalData?
  projects         Project[]
  skills           Skill[]
  socialMedia      SocialMedia?
  auth             Auth?
}

model Education {
  id          String @id @default(cuid())
  college     String
  department  String
  passingYear Int
  degree      String
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfessionalData {
  id                String @id @default(cuid())
  currentCompany    String
  jobTitle          String
  location          String
  yearsOfExperience Int
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String @id @default(cuid())
  title       String
  liveUrl     String
  githubUrl   String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialMedia {
  id        String  @id @default(cuid())
  linkedin  String
  twitter   String
  github    String
  instagram String?
  youtube   String?
  portfolio String?
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Auth {
  id           String          @id @default(cuid())
  verifyEmail  Boolean         @default(false)
  verifyToken  String?         @unique
  otp          Int?            @unique
  otpExpiresAt DateTime?
  userId       String          @unique
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminAuth {
  id           String          @id @default(cuid())
  verifyEmail  Boolean         @default(false)
  verifyToken  String?         @unique
  otp          Int?            @unique
  otpExpiresAt DateTime?
  adminId      String          @unique
  admin        Admin           @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Skill {
  id     String @id @default(cuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Alumni
  User
}